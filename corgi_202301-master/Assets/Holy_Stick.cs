//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Holy_Stick.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Holy_Stick : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Holy_Stick()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Holy_Stick"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""e86f3133-cc6a-4e65-9347-bfcd30426f44"",
            ""actions"": [
                {
                    ""name"": ""Move_R"",
                    ""type"": ""Button"",
                    ""id"": ""9329e32f-5e62-40b5-9050-2cb9c5d25bb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move_L"",
                    ""type"": ""Button"",
                    ""id"": ""ece3929c-642e-45d1-b12c-31da6877c867"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move_Up"",
                    ""type"": ""Button"",
                    ""id"": ""bb54b02a-a57a-40fc-bde0-2ba88f5144d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move_Down"",
                    ""type"": ""Button"",
                    ""id"": ""5f9e78e6-b781-4a1b-9541-3caf6307f640"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""f45f0d13-1c05-4202-83d4-26ce529800a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""51e85297-3248-4f53-8214-afd2857c1231"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""45c35878-1820-4954-96b4-9bd3b4c0fe90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""378778d6-649d-4cea-b117-b7d4ba7a95c2"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move_R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccab16ea-af3f-451e-8702-f12e5e7e8b19"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move_L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""604b5f2e-1dd4-472a-9a2f-6b5ea6a8e1c0"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move_Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77d06878-604b-4df5-a7e8-3da6722cdd85"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move_Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4cb1604-9f2e-4a3b-b3a2-9b30810d2756"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d909e820-06d3-41d0-b0c7-822abe02d0a0"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b25ec7af-26fe-4244-bc25-497c9de2f2c0"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Move_R = m_Gameplay.FindAction("Move_R", throwIfNotFound: true);
        m_Gameplay_Move_L = m_Gameplay.FindAction("Move_L", throwIfNotFound: true);
        m_Gameplay_Move_Up = m_Gameplay.FindAction("Move_Up", throwIfNotFound: true);
        m_Gameplay_Move_Down = m_Gameplay.FindAction("Move_Down", throwIfNotFound: true);
        m_Gameplay_Dash = m_Gameplay.FindAction("Dash", throwIfNotFound: true);
        m_Gameplay_Attack = m_Gameplay.FindAction("Attack", throwIfNotFound: true);
        m_Gameplay_Pause = m_Gameplay.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Move_R;
    private readonly InputAction m_Gameplay_Move_L;
    private readonly InputAction m_Gameplay_Move_Up;
    private readonly InputAction m_Gameplay_Move_Down;
    private readonly InputAction m_Gameplay_Dash;
    private readonly InputAction m_Gameplay_Attack;
    private readonly InputAction m_Gameplay_Pause;
    public struct GameplayActions
    {
        private @Holy_Stick m_Wrapper;
        public GameplayActions(@Holy_Stick wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move_R => m_Wrapper.m_Gameplay_Move_R;
        public InputAction @Move_L => m_Wrapper.m_Gameplay_Move_L;
        public InputAction @Move_Up => m_Wrapper.m_Gameplay_Move_Up;
        public InputAction @Move_Down => m_Wrapper.m_Gameplay_Move_Down;
        public InputAction @Dash => m_Wrapper.m_Gameplay_Dash;
        public InputAction @Attack => m_Wrapper.m_Gameplay_Attack;
        public InputAction @Pause => m_Wrapper.m_Gameplay_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Move_R.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_R;
                @Move_R.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_R;
                @Move_R.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_R;
                @Move_L.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_L;
                @Move_L.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_L;
                @Move_L.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_L;
                @Move_Up.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Up;
                @Move_Up.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Up;
                @Move_Up.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Up;
                @Move_Down.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Down;
                @Move_Down.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Down;
                @Move_Down.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Down;
                @Dash.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDash;
                @Attack.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAttack;
                @Pause.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move_R.started += instance.OnMove_R;
                @Move_R.performed += instance.OnMove_R;
                @Move_R.canceled += instance.OnMove_R;
                @Move_L.started += instance.OnMove_L;
                @Move_L.performed += instance.OnMove_L;
                @Move_L.canceled += instance.OnMove_L;
                @Move_Up.started += instance.OnMove_Up;
                @Move_Up.performed += instance.OnMove_Up;
                @Move_Up.canceled += instance.OnMove_Up;
                @Move_Down.started += instance.OnMove_Down;
                @Move_Down.performed += instance.OnMove_Down;
                @Move_Down.canceled += instance.OnMove_Down;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMove_R(InputAction.CallbackContext context);
        void OnMove_L(InputAction.CallbackContext context);
        void OnMove_Up(InputAction.CallbackContext context);
        void OnMove_Down(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
